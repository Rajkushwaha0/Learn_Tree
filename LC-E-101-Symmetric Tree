class Solution{
    public boolean isSymmetric(TreeNode root) {
        if(root.left==null && root.right==null) return true;
        return symmtry(root.left,root.right);
    }
    public Boolean symmtry(TreeNode node1 , TreeNode node2){
        if(node1==null && node2==null) return true;
        if(node1!=null && node2==null) return false;
        if(node1==null && node2!=null) return false;
        Boolean value = node1.val==node2.val;
        Boolean left = symmtry(node1.left,node2.right);
        Boolean right = symmtry(node1.right,node2.left);
        return value&&left&&right;
    }
}


Partially correct if value are not duplicate
// class Solution {
//     public boolean isSymmetric(TreeNode root) {
//         if((root.left==null && root.right==null)) return true;
//         inorder(root.right);
//         List<Integer> l1 =new ArrayList<>(l3);
//         l3=new ArrayList<>();
//         inorder(root.left);
//         List<Integer> l2 = new ArrayList<>(l3);
//         Collections.reverse(l2);
//         if(l1.equals(l2)) return true;
//         return false;
        

//     }
//     public List<Integer> l3 =new ArrayList<>();
//     public void inorder(TreeNode node){
        
//         if(node==null) return ;

//         inorder(node.left);
//         l3.add(node.val);
//         inorder(node.right);
//         return ;
//     }
// }


